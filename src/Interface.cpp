/*
 * DO NOT EDIT THIS FILE - it is generated by Glade.
 */

#ifdef HAVE_CONFIG_H
#  include <config.h>
#endif

#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <string.h>
#include <stdio.h>

#include <gdk/gdkkeysyms.h>
#include <gtk/gtk.h>

#include "Callbacks.h"
#include "Interface.h"
#include "Support.h"

#define GLADE_HOOKUP_OBJECT(component,widget,name) \
  g_object_set_data_full (G_OBJECT (component), name, \
    gtk_widget_ref (widget), (GDestroyNotify) gtk_widget_unref)

#define GLADE_HOOKUP_OBJECT_NO_REF(component,widget,name) \
  g_object_set_data (G_OBJECT (component), name, widget)


GtkWidget*
create_AboutDialog (void)
{
  GtkWidget *AboutDialog;
  const gchar *authors[] = {
    "Qt To GTK+ by N. Sharjith",
    NULL
  };
  /* TRANSLATORS: Replace this string with your names, one name per line. */
  gchar *translators = _("translator-credits");
  GdkPixbuf *AboutDialog_logo_pixbuf;

  AboutDialog = gtk_about_dialog_new ();
  gtk_widget_set_name (AboutDialog, "AboutDialog");
  gtk_window_set_destroy_with_parent (GTK_WINDOW (AboutDialog), TRUE);
  gtk_about_dialog_set_version (GTK_ABOUT_DIALOG (AboutDialog), VERSION);
  gtk_about_dialog_set_name (GTK_ABOUT_DIALOG (AboutDialog), _("OCCViewer"));
  gtk_about_dialog_set_copyright (GTK_ABOUT_DIALOG (AboutDialog), _("OpenCASCADE Technologies"));
  gtk_about_dialog_set_comments (GTK_ABOUT_DIALOG (AboutDialog), _("OpenCASCADE Viewer\nOriginal Qt example ported to GTK+"));
  gtk_about_dialog_set_license (GTK_ABOUT_DIALOG (AboutDialog), _("Open CASCADE Technology Public License\nLicense version : 6.1 March, 2006\n\nOpen CASCADE S.A.S. releases and makes publicly available the source code of the software Open CASCADE Technology to the free software development community under the terms and conditions of this license.\n\nIt is not the purpose of this license to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this license has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.\n\n\nPlease read this license carefully and completely before downloading this software. By downloading, using, modifying, distributing and sublicensing this software, you indicate your acceptance to be bound by the terms and conditions of this license. If you do not want to accept or cannot accept for any reasons the terms and conditions of this license, please do not download or use in any manner this software.\n\n1. Definitions \n\nUnless there is something in the subject matter or in the context inconsistent therewith, the capitalized terms used in this License shall have the following meaning.\n\n\"Applicable Intellectual Property Rights\" means (a) with respect to the Initial Developer, any rights under patents or patents applications or other intellectual property rights that are now or hereafter acquired, owned by or assigned to the Initial Developer and that cover subject matter contained in the Original Code, but only to the extent necessary to use, reproduce, modify, distribute or sublicense the Original Code without infringement; and (b) with respect to You or any Contributor, any rights under patents or patents applications or other intellectual property rights that are now or hereafter acquired, owned by or assigned to You or to such Contributor and that cover subject matter contained in Your Modifications or in such Contributor's Modifications, taken alone or in combination with Original Code\n\n\"Contributor\" means each individual or legal entity that creates or contributes to the creation of any Modification, including the Initial Developer. \n\n\"Derivative Program\": means a new program combining the Software or portions thereof with other source code not governed by the terms of this License. \n\n\"Initial Developer\": means Open CASCADE S.A.S., with main offices at 1, rue Isabey 92500, Rueil-Malmaison, France.\n\n\"Modifications\": mean any addition to, deletion from or change to the substance or the structure of the Software. When source code of the Software is released as a series of files, a Modification is: (a) any addition to, deletion from or change to the contents of a file containing the Software or (b) any new file or other representation of computer program statements that contains any part of the Software. By way of example, Modifications include any debug of, or improvement to, the Original Code or any of its components or portions as well as its next versions or releases thereof. \n\n\"Original Code\": means (a) the source code of the software Open CASCADE Technology originally made available by the Initial Developer under this License, including the source code of any updates or upgrades of the Original Code and (b) the object code compiled from such source code and originally made available by Initial Developer under this License. \n\n\"Software\": means the Original Code, the Modifications, the combination of Original Code and any Modifications or any respective portions thereof. \n\n\"You\" or \"Your\": means an individual or a legal entity exercising rights under this License \n\n2. Acceptance of license\n\nBy using, reproducing, modifying, distributing or sublicensing the Software or any portion thereof, You expressly indicate Your acceptance of the terms and conditions of this License and undertake to act in accordance with all the provisions of this License applicable to You. \n\n\n3. Scope and purpose\n\nThis License applies to the Software and You may not use, reproduce, modify, distribute, sublicense or circulate the Software, or any portion thereof, except as expressly provided under this License. Any attempt to otherwise use, reproduce, modify, distribute or sublicense the Software is void and will automatically terminate Your rights under this License. \n\n\n4. Contributor license\n\nSubject to the terms and conditions of this License, the Initial Developer and each of the Contributors hereby grant You a world-wide, royalty-free, irrevocable and non-exclusive license under the Applicable Intellectual Property Rights they own or control, to use, reproduce, modify, distribute and sublicense the Software provided that: \n\nYou reproduce in all copies of the Software the copyright and other proprietary notices and disclaimers of the Initial Developer as they appear in the Original Code and attached hereto as Schedule \"A\" and any other notices or disclaimers attached to the Software and keep intact all notices in the Original Code that refer to this License and to the absence of any warranty; \nYou include a copy of this License with every copy of the Software You distribute; \nIf you distribute or sublicense the Software (as modified by You or on Your behalf as the case may be), You cause such Software to be licensed as a whole, at no charge, to all third parties, under the terms and conditions of the License, making in particular available to all third parties the source code of the Software; \nYou document all Your Modifications, indicate the date of each such Modifications, designate the version of the Software You used, prominently include a file carrying such information with respect to the Modifications and duplicate the copyright and other proprietary notices and disclaimers attached hereto as Schedule \"B\" or any other notices or disclaimers attached to the Software with your Modifications.\n\nFor greater certainty, it is expressly understood that You may freely create Derivative Programs (without any obligation to publish such Derivative Program) and distribute same as a single product. In such case, You must ensure that all the requirements of this License are fulfilled for the Software or any portion thereof.\n\n5. Your license\n\nYou hereby grant all Contributors and anyone who becomes a party under this License a world-wide, non-exclusive, royalty-free and irrevocable license under the Applicable Intellectual Property Rights owned or controlled by You, to use, reproduce, modify, distribute and sublicense all Your Modifications under the terms and conditions of this License. \n\n6. Software subject to license\n\nYour Modifications shall be governed by the terms and conditions of this License. You are not authorized to impose any other terms or conditions than those prevailing under this License when You distribute and/or sublicense the Software, save and except as permitted under Section 7 hereof. \n\n7. Additional terms\n\nYou may choose to offer, on a non-exclusive basis, and to charge a fee for any warranty, support, maintenance, liability obligations or other rights consistent with the scope of this License with respect to the Software (the \"Additional Terms\") to the recipients of the Software. However, You may do so only on Your own behalf and on Your sole and exclusive responsibility. You must obtain the recipient's agreement that any such Additional Terms are offered by You alone, and You hereby agree to indemnify, defend and hold the Initial Developer and any Contributor harmless for any liability incurred by or claims asserted against the Initial Developer or any Contributors with respect to any such Additional Terms. \n\n8. Disclaimer of warranty\n\nThe Software is provided under this License on an \"as is\" basis, without warranty of any kind, including without limitation, warranties that the Software is free of defects, merchantable, fit for a particular purpose or non-infringing. The entire risk as to the quality and performance of the Software is with You. \n\n9. Liability\n\nUnder no circumstances shall You, the Initial Developer or any Contributor be liable to any person for any direct or indirect damages of any kind including, without limitation, damages for loss of goodwill, loss of data, work stoppage, computer failure or malfunction or any and all other commercial damages or losses resulting from or relating to this License or indirectly to the use of the Software. \n\n10. Trademark\n\nThis License does not grant any rights to use the trademarks, trade names and domain names \"MATRA\", \"EADS Matra Datavision\", \"CAS.CADE\", \"Open CASCADE\", \"opencascade.com\" and \"opencascade.org\" or any other trademarks, trade names or domain names used or owned by the Initial Developer. \n\n11. Copyright\n\nThe Initial Developer retains all rights, title and interest in and to the Original Code. You may not remove the copyright \302\251 notice which appears when You download the Software.\n\n12. Term\n\nThis License is granted to You for a term equal to the remaining period of protection covered by the intellectual property rights applicable to the Original Code.\n\n13. Termination\n\nIn case of termination, as provided in Section 3 above, You agree to immediately stop any further use, reproduction, modification, distribution and sublicensing of the Software and to destroy all copies of the Software that are in Your possession or control. All sublicenses of the Software which have been properly granted prior to termination shall survive any termination of this License. In addition, Sections 5, 8 to 11, 13.2 and 15.2 of this License, in reason of their nature, shall survive the termination of this License for a period of fifteen (15) years. \n\n14. Versions of the license\n\nThe Initial Developer may publish new versions of this License from time to time. Once Original Code has been published under a particular version of this License, You may choose to continue to use it under the terms and conditions of that version or use the Original Code under the terms of any subsequent version of this License published by the Initial Developer.\n\n15. Miscellaneous\n\n15.1 Relationship of Parties\n\nThis License will not be construed as creating an agency, partnership, joint venture or any other form of legal association between You and the Initial Developer, and You will not represent to the contrary, whether expressly, by implication or otherwise.\n\n15.2 Independent Development\n\nNothing in this License will impair the Initial Developer's right to acquire, license, develop, have others develop for it, market or distribute technology or products that perform the same or similar functions as, or otherwise compete with, Modifications, Derivative Programs, technology or products that You may develop, produce, market or distribute. \n\n15.3 Severability\n\nIf for any reason a court of competent jurisdiction finds any provision of this License, or portion thereof, to be unenforceable, that provision of the License will be enforced to the maximum extent permissible so as to effect the economic benefits and intent of the parties, and the remainder of this License will continue in full force and extent.\n\n\nEND OF THE TERMS AND\nCONDITIONS OF THIS LICENSE\n\n\nOpen CASCADE S.A.S. is a French soci\303\251t\303\251 par actions simplifi\303\251e having its registered head office at 31, avenue de la Baltique, 91954 Les Ulis Cedex, France and main offices at 1, rue Isabey 92500, Rueil-Malmaison, France. Its web site is located at the following address www.opencascade.com\n\n\nOpen CASCADE Technology Public License\n\nSchedule \"A\"\n\n\nThe content of this file is subject to the Open CASCADE Technology Public License Version 6.1 (the \"License\"). You may not use the content of this file except in compliance with the License. Please obtain a copy of the License at http://www.opencascade.org and read it completely before using this file.\n\nThe Initial Developer of the Original Code is Open CASCADE S.A.S., with main offices at 1, rue Isabey 92500, Rueil-Malmaison, France. The Original Code is copyright \302\251 Open CASCADE S.A.S., 2001. All rights reserved. \n\n\"The Original Code and all software distributed under the License are distributed on an \"AS IS\" basis, without warranty of any kind, and the Initial Developer hereby disclaims all such warranties, including without limitation, any warranties of merchantability, fitness for a particular purpose or non-infringement. Please see the License for the specific terms and conditions governing rights and limitations under the License\".\n\n\nEnd of Schedule \"A\"\n\nOpen CASCADE Technology Public License \n\nSchedule \"B\"\n\n\n\n\"The content of this file is subject to the Open CASCADE Technology Public License Version 6.1 (the \"License\"). You may not use the content of this file except in compliance with the License. Please obtain a copy of the License at http://www.opencascade.org and read it completely before using this file.\n\nThe Initial Developer of the Original Code is Open CASCADE S.A.S., with main offices at 1, rue Isabey 92500, Rueil-Malmaison, France. The Original Code is copyright \302\251 Open CASCADE S.A.S., 2001. All rights reserved.\n\nModifications to the Original Code have been made by ________________________. Modifications are copyright \302\251 [Year to be included]. All rights reserved.\n\nThe software Open CASCADE Technology and all software distributed under the License are distributed on an \"AS IS\" basis, without warranty of any kind, and the Initial Developer hereby disclaims all such warranties, including without limitation, any warranties of merchantability, fitness for a particular purpose or non-infringement. Please see the License for the specific terms and conditions governing rights and limitations under the License\"\n\n\nEnd of Schedule \"B\"\n"));
  gtk_about_dialog_set_wrap_license (GTK_ABOUT_DIALOG (AboutDialog), TRUE);
  gtk_about_dialog_set_website (GTK_ABOUT_DIALOG (AboutDialog), "www.opencascade.org");
  gtk_about_dialog_set_website_label (GTK_ABOUT_DIALOG (AboutDialog), _("www.opencascade.org"));
  gtk_about_dialog_set_authors (GTK_ABOUT_DIALOG (AboutDialog), authors);
  gtk_about_dialog_set_translator_credits (GTK_ABOUT_DIALOG (AboutDialog), translators);
  AboutDialog_logo_pixbuf = create_pixbuf ("opencascade.gif");
  gtk_about_dialog_set_logo (GTK_ABOUT_DIALOG (AboutDialog), AboutDialog_logo_pixbuf);

  /* Store pointers to all widgets, for use by lookup_widget(). */
  GLADE_HOOKUP_OBJECT_NO_REF (AboutDialog, AboutDialog, "AboutDialog");

  return AboutDialog;
}

GtkWidget*
create_popup_bg (void)
{
  GtkWidget *popup_bg;
  GtkWidget *change_background_color1;
  GtkWidget *image102;

  popup_bg = gtk_menu_new ();
  gtk_widget_set_name (popup_bg, "popup_bg");

  change_background_color1 = gtk_image_menu_item_new_with_mnemonic (_("Change Background Color"));
  gtk_widget_set_name (change_background_color1, "change_background_color1");
  gtk_widget_show (change_background_color1);
  gtk_container_add (GTK_CONTAINER (popup_bg), change_background_color1);

  image102 = gtk_image_new_from_stock ("gtk-select-color", GTK_ICON_SIZE_MENU);
  gtk_widget_set_name (image102, "image102");
  gtk_widget_show (image102);
  gtk_image_menu_item_set_image (GTK_IMAGE_MENU_ITEM (change_background_color1), image102);

  g_signal_connect ((gpointer) change_background_color1, "activate",
                    G_CALLBACK (on_popup_change_background_color1_activate),
                    NULL);

  /* Store pointers to all widgets, for use by lookup_widget(). */
  GLADE_HOOKUP_OBJECT_NO_REF (popup_bg, popup_bg, "popup_bg");
  GLADE_HOOKUP_OBJECT (popup_bg, change_background_color1, "change_background_color1");
  GLADE_HOOKUP_OBJECT (popup_bg, image102, "image102");

  return popup_bg;
}

GtkWidget*
create_popup_object (void)
{
  GtkWidget *popup_object;
  GtkWidget *wireframe1;
  GtkWidget *shading1;
  GtkWidget *color1;
  GtkWidget *material1;
  GtkWidget *material1_menu;
  GtkWidget *brass1;
  GtkWidget *bronze1;
  GtkWidget *copper1;
  GtkWidget *gold1;
  GtkWidget *pewter1;
  GtkWidget *plaster1;
  GtkWidget *plastic1;
  GtkWidget *silver1;
  GtkWidget *transparency1;
  GtkWidget *delete1;

  popup_object = gtk_menu_new ();
  gtk_widget_set_name (popup_object, "popup_object");

  wireframe1 = gtk_menu_item_new_with_mnemonic (_("Wireframe"));
  gtk_widget_set_name (wireframe1, "wireframe1");
  gtk_widget_show (wireframe1);
  gtk_container_add (GTK_CONTAINER (popup_object), wireframe1);

  shading1 = gtk_menu_item_new_with_mnemonic (_("Shading"));
  gtk_widget_set_name (shading1, "shading1");
  gtk_widget_show (shading1);
  gtk_container_add (GTK_CONTAINER (popup_object), shading1);

  color1 = gtk_menu_item_new_with_mnemonic (_("Color"));
  gtk_widget_set_name (color1, "color1");
  gtk_widget_show (color1);
  gtk_container_add (GTK_CONTAINER (popup_object), color1);

  material1 = gtk_menu_item_new_with_mnemonic (_("Material"));
  gtk_widget_set_name (material1, "material1");
  gtk_widget_show (material1);
  gtk_container_add (GTK_CONTAINER (popup_object), material1);

  material1_menu = gtk_menu_new ();
  gtk_widget_set_name (material1_menu, "material1_menu");
  gtk_menu_item_set_submenu (GTK_MENU_ITEM (material1), material1_menu);

  brass1 = gtk_menu_item_new_with_mnemonic (_("Brass"));
  gtk_widget_set_name (brass1, "brass1");
  gtk_widget_show (brass1);
  gtk_container_add (GTK_CONTAINER (material1_menu), brass1);

  bronze1 = gtk_menu_item_new_with_mnemonic (_("Bronze"));
  gtk_widget_set_name (bronze1, "bronze1");
  gtk_widget_show (bronze1);
  gtk_container_add (GTK_CONTAINER (material1_menu), bronze1);

  copper1 = gtk_menu_item_new_with_mnemonic (_("Copper"));
  gtk_widget_set_name (copper1, "copper1");
  gtk_widget_show (copper1);
  gtk_container_add (GTK_CONTAINER (material1_menu), copper1);

  gold1 = gtk_menu_item_new_with_mnemonic (_("Gold"));
  gtk_widget_set_name (gold1, "gold1");
  gtk_widget_show (gold1);
  gtk_container_add (GTK_CONTAINER (material1_menu), gold1);

  pewter1 = gtk_menu_item_new_with_mnemonic (_("Pewter"));
  gtk_widget_set_name (pewter1, "pewter1");
  gtk_widget_show (pewter1);
  gtk_container_add (GTK_CONTAINER (material1_menu), pewter1);

  plaster1 = gtk_menu_item_new_with_mnemonic (_("Plaster"));
  gtk_widget_set_name (plaster1, "plaster1");
  gtk_widget_show (plaster1);
  gtk_container_add (GTK_CONTAINER (material1_menu), plaster1);

  plastic1 = gtk_menu_item_new_with_mnemonic (_("Plastic"));
  gtk_widget_set_name (plastic1, "plastic1");
  gtk_widget_show (plastic1);
  gtk_container_add (GTK_CONTAINER (material1_menu), plastic1);

  silver1 = gtk_menu_item_new_with_mnemonic (_("Silver"));
  gtk_widget_set_name (silver1, "silver1");
  gtk_widget_show (silver1);
  gtk_container_add (GTK_CONTAINER (material1_menu), silver1);

  transparency1 = gtk_menu_item_new_with_mnemonic (_("Transparency"));
  gtk_widget_set_name (transparency1, "transparency1");
  gtk_widget_show (transparency1);
  gtk_container_add (GTK_CONTAINER (popup_object), transparency1);

  delete1 = gtk_menu_item_new_with_mnemonic (_("Delete"));
  gtk_widget_set_name (delete1, "delete1");
  gtk_widget_show (delete1);
  gtk_container_add (GTK_CONTAINER (popup_object), delete1);

  g_signal_connect ((gpointer) wireframe1, "activate",
                    G_CALLBACK (on_popup_wireframe1_activate),
                    NULL);
  g_signal_connect ((gpointer) shading1, "activate",
                    G_CALLBACK (on_popup_shading1_activate),
                    NULL);
  g_signal_connect ((gpointer) color1, "activate",
                    G_CALLBACK (on_popup_color1_activate),
                    NULL);
  g_signal_connect ((gpointer) material1, "activate",
                    G_CALLBACK (on_popup_material1_activate),
                    NULL);
  g_signal_connect ((gpointer) brass1, "activate",
                    G_CALLBACK (on_brass1_activate),
                    NULL);
  g_signal_connect ((gpointer) bronze1, "activate",
                    G_CALLBACK (on_bronze1_activate),
                    NULL);
  g_signal_connect ((gpointer) copper1, "activate",
                    G_CALLBACK (on_copper1_activate),
                    NULL);
  g_signal_connect ((gpointer) gold1, "activate",
                    G_CALLBACK (on_gold1_activate),
                    NULL);
  g_signal_connect ((gpointer) pewter1, "activate",
                    G_CALLBACK (on_pewter1_activate),
                    NULL);
  g_signal_connect ((gpointer) plaster1, "activate",
                    G_CALLBACK (on_plaster1_activate),
                    NULL);
  g_signal_connect ((gpointer) plastic1, "activate",
                    G_CALLBACK (on_plastic1_activate),
                    NULL);
  g_signal_connect ((gpointer) silver1, "activate",
                    G_CALLBACK (on_silver1_activate),
                    NULL);
  g_signal_connect ((gpointer) transparency1, "activate",
                    G_CALLBACK (on_popup_transparency1_activate),
                    NULL);
  g_signal_connect ((gpointer) delete1, "activate",
                    G_CALLBACK (on_popup_delete1_activate),
                    NULL);

  /* Store pointers to all widgets, for use by lookup_widget(). */
  GLADE_HOOKUP_OBJECT_NO_REF (popup_object, popup_object, "popup_object");
  GLADE_HOOKUP_OBJECT (popup_object, wireframe1, "wireframe1");
  GLADE_HOOKUP_OBJECT (popup_object, shading1, "shading1");
  GLADE_HOOKUP_OBJECT (popup_object, color1, "color1");
  GLADE_HOOKUP_OBJECT (popup_object, material1, "material1");
  GLADE_HOOKUP_OBJECT (popup_object, material1_menu, "material1_menu");
  GLADE_HOOKUP_OBJECT (popup_object, brass1, "brass1");
  GLADE_HOOKUP_OBJECT (popup_object, bronze1, "bronze1");
  GLADE_HOOKUP_OBJECT (popup_object, copper1, "copper1");
  GLADE_HOOKUP_OBJECT (popup_object, gold1, "gold1");
  GLADE_HOOKUP_OBJECT (popup_object, pewter1, "pewter1");
  GLADE_HOOKUP_OBJECT (popup_object, plaster1, "plaster1");
  GLADE_HOOKUP_OBJECT (popup_object, plastic1, "plastic1");
  GLADE_HOOKUP_OBJECT (popup_object, silver1, "silver1");
  GLADE_HOOKUP_OBJECT (popup_object, transparency1, "transparency1");
  GLADE_HOOKUP_OBJECT (popup_object, delete1, "delete1");

  return popup_object;
}

GtkWidget*
create_Transparency (void)
{
  GtkWidget *Transparency;
  GtkWidget *dialog_vbox1;
  GtkWidget *hbox1;
  GtkWidget *label1;
  GtkObject *transparency_spinbutton_adj;
  GtkWidget *transparency_spinbutton;
  GtkWidget *dialog_action_area1;

  Transparency = gtk_dialog_new ();
  gtk_widget_set_name (Transparency, "Transparency");
  gtk_window_set_title (GTK_WINDOW (Transparency), _("Transparency"));
  gtk_window_set_type_hint (GTK_WINDOW (Transparency), GDK_WINDOW_TYPE_HINT_DIALOG);

  dialog_vbox1 = GTK_DIALOG (Transparency)->vbox;
  gtk_widget_set_name (dialog_vbox1, "dialog_vbox1");
  gtk_widget_show (dialog_vbox1);

  hbox1 = gtk_hbox_new (FALSE, 5);
  gtk_widget_set_name (hbox1, "hbox1");
  gtk_widget_show (hbox1);
  gtk_box_pack_start (GTK_BOX (dialog_vbox1), hbox1, FALSE, TRUE, 0);
  gtk_container_set_border_width (GTK_CONTAINER (hbox1), 5);

  label1 = gtk_label_new (_("Value"));
  gtk_widget_set_name (label1, "label1");
  gtk_widget_show (label1);
  gtk_box_pack_start (GTK_BOX (hbox1), label1, FALSE, FALSE, 0);

  transparency_spinbutton_adj = gtk_adjustment_new (0, 0, 10, 1, 10, 10);
  transparency_spinbutton = gtk_spin_button_new (GTK_ADJUSTMENT (transparency_spinbutton_adj), 1, 0);
  gtk_widget_set_name (transparency_spinbutton, "transparency_spinbutton");
  gtk_widget_show (transparency_spinbutton);
  gtk_box_pack_start (GTK_BOX (hbox1), transparency_spinbutton, TRUE, TRUE, 0);
  gtk_spin_button_set_numeric (GTK_SPIN_BUTTON (transparency_spinbutton), TRUE);
  gtk_spin_button_set_update_policy (GTK_SPIN_BUTTON (transparency_spinbutton), GTK_UPDATE_IF_VALID);

  dialog_action_area1 = GTK_DIALOG (Transparency)->action_area;
  gtk_widget_set_name (dialog_action_area1, "dialog_action_area1");
  gtk_button_box_set_layout (GTK_BUTTON_BOX (dialog_action_area1), GTK_BUTTONBOX_END);

  g_signal_connect ((gpointer) transparency_spinbutton, "value_changed",
                    G_CALLBACK (on_transparency_spinbutton_value_changed),
                    NULL);

  /* Store pointers to all widgets, for use by lookup_widget(). */
  GLADE_HOOKUP_OBJECT_NO_REF (Transparency, Transparency, "Transparency");
  GLADE_HOOKUP_OBJECT_NO_REF (Transparency, dialog_vbox1, "dialog_vbox1");
  GLADE_HOOKUP_OBJECT (Transparency, hbox1, "hbox1");
  GLADE_HOOKUP_OBJECT (Transparency, label1, "label1");
  GLADE_HOOKUP_OBJECT (Transparency, transparency_spinbutton, "transparency_spinbutton");
  GLADE_HOOKUP_OBJECT_NO_REF (Transparency, dialog_action_area1, "dialog_action_area1");

  return Transparency;
}

GtkWidget*
create_MatlDlg (void)
{
  GtkWidget *MatlDlg;
  GtkWidget *dialog_vbox2;
  GtkWidget *vbox2;
  GtkWidget *brass_radiobutton;
  GSList *brass_radiobutton_group = NULL;
  GtkWidget *bronze_radiobutton;
  GtkWidget *copper_radiobutton;
  GtkWidget *gold_radiobutton;
  GtkWidget *pewter_radiobutton;
  GtkWidget *plaster_radiobutton;
  GtkWidget *plastic_radiobutton;
  GtkWidget *silver_radiobutton;
  GtkWidget *dialog_action_area2;
  GtkWidget *closebutton1;

  MatlDlg = gtk_dialog_new ();
  gtk_widget_set_name (MatlDlg, "MatlDlg");
  gtk_widget_set_size_request (MatlDlg, 98, 265);
  gtk_window_set_title (GTK_WINDOW (MatlDlg), _("Select Material"));
  gtk_window_set_destroy_with_parent (GTK_WINDOW (MatlDlg), TRUE);
  gtk_window_set_type_hint (GTK_WINDOW (MatlDlg), GDK_WINDOW_TYPE_HINT_DIALOG);

  dialog_vbox2 = GTK_DIALOG (MatlDlg)->vbox;
  gtk_widget_set_name (dialog_vbox2, "dialog_vbox2");
  gtk_widget_show (dialog_vbox2);

  vbox2 = gtk_vbox_new (FALSE, 0);
  gtk_widget_set_name (vbox2, "vbox2");
  gtk_widget_show (vbox2);
  gtk_box_pack_start (GTK_BOX (dialog_vbox2), vbox2, FALSE, FALSE, 0);

  brass_radiobutton = gtk_radio_button_new_with_mnemonic (NULL, _("Brass"));
  gtk_widget_set_name (brass_radiobutton, "brass_radiobutton");
  gtk_widget_show (brass_radiobutton);
  gtk_box_pack_start (GTK_BOX (vbox2), brass_radiobutton, FALSE, FALSE, 0);
  gtk_radio_button_set_group (GTK_RADIO_BUTTON (brass_radiobutton), brass_radiobutton_group);
  brass_radiobutton_group = gtk_radio_button_get_group (GTK_RADIO_BUTTON (brass_radiobutton));
  gtk_toggle_button_set_mode (GTK_TOGGLE_BUTTON (brass_radiobutton), FALSE);

  bronze_radiobutton = gtk_radio_button_new_with_mnemonic (NULL, _("Bronze"));
  gtk_widget_set_name (bronze_radiobutton, "bronze_radiobutton");
  gtk_widget_show (bronze_radiobutton);
  gtk_box_pack_start (GTK_BOX (vbox2), bronze_radiobutton, FALSE, FALSE, 0);
  gtk_radio_button_set_group (GTK_RADIO_BUTTON (bronze_radiobutton), brass_radiobutton_group);
  brass_radiobutton_group = gtk_radio_button_get_group (GTK_RADIO_BUTTON (bronze_radiobutton));
  gtk_toggle_button_set_mode (GTK_TOGGLE_BUTTON (bronze_radiobutton), FALSE);

  copper_radiobutton = gtk_radio_button_new_with_mnemonic (NULL, _("Copper"));
  gtk_widget_set_name (copper_radiobutton, "copper_radiobutton");
  gtk_widget_show (copper_radiobutton);
  gtk_box_pack_start (GTK_BOX (vbox2), copper_radiobutton, FALSE, FALSE, 0);
  gtk_radio_button_set_group (GTK_RADIO_BUTTON (copper_radiobutton), brass_radiobutton_group);
  brass_radiobutton_group = gtk_radio_button_get_group (GTK_RADIO_BUTTON (copper_radiobutton));
  gtk_toggle_button_set_mode (GTK_TOGGLE_BUTTON (copper_radiobutton), FALSE);

  gold_radiobutton = gtk_radio_button_new_with_mnemonic (NULL, _("Gold"));
  gtk_widget_set_name (gold_radiobutton, "gold_radiobutton");
  gtk_widget_show (gold_radiobutton);
  gtk_box_pack_start (GTK_BOX (vbox2), gold_radiobutton, FALSE, FALSE, 0);
  gtk_radio_button_set_group (GTK_RADIO_BUTTON (gold_radiobutton), brass_radiobutton_group);
  brass_radiobutton_group = gtk_radio_button_get_group (GTK_RADIO_BUTTON (gold_radiobutton));
  gtk_toggle_button_set_mode (GTK_TOGGLE_BUTTON (gold_radiobutton), FALSE);

  pewter_radiobutton = gtk_radio_button_new_with_mnemonic (NULL, _("Pewter"));
  gtk_widget_set_name (pewter_radiobutton, "pewter_radiobutton");
  gtk_widget_show (pewter_radiobutton);
  gtk_box_pack_start (GTK_BOX (vbox2), pewter_radiobutton, FALSE, FALSE, 0);
  gtk_radio_button_set_group (GTK_RADIO_BUTTON (pewter_radiobutton), brass_radiobutton_group);
  brass_radiobutton_group = gtk_radio_button_get_group (GTK_RADIO_BUTTON (pewter_radiobutton));
  gtk_toggle_button_set_mode (GTK_TOGGLE_BUTTON (pewter_radiobutton), FALSE);

  plaster_radiobutton = gtk_radio_button_new_with_mnemonic (NULL, _("Plaster"));
  gtk_widget_set_name (plaster_radiobutton, "plaster_radiobutton");
  gtk_widget_show (plaster_radiobutton);
  gtk_box_pack_start (GTK_BOX (vbox2), plaster_radiobutton, FALSE, FALSE, 0);
  gtk_radio_button_set_group (GTK_RADIO_BUTTON (plaster_radiobutton), brass_radiobutton_group);
  brass_radiobutton_group = gtk_radio_button_get_group (GTK_RADIO_BUTTON (plaster_radiobutton));
  gtk_toggle_button_set_mode (GTK_TOGGLE_BUTTON (plaster_radiobutton), FALSE);

  plastic_radiobutton = gtk_radio_button_new_with_mnemonic (NULL, _("Plastic"));
  gtk_widget_set_name (plastic_radiobutton, "plastic_radiobutton");
  gtk_widget_show (plastic_radiobutton);
  gtk_box_pack_start (GTK_BOX (vbox2), plastic_radiobutton, FALSE, FALSE, 0);
  gtk_radio_button_set_group (GTK_RADIO_BUTTON (plastic_radiobutton), brass_radiobutton_group);
  brass_radiobutton_group = gtk_radio_button_get_group (GTK_RADIO_BUTTON (plastic_radiobutton));
  gtk_toggle_button_set_mode (GTK_TOGGLE_BUTTON (plastic_radiobutton), FALSE);

  silver_radiobutton = gtk_radio_button_new_with_mnemonic (NULL, _("Silver"));
  gtk_widget_set_name (silver_radiobutton, "silver_radiobutton");
  gtk_widget_show (silver_radiobutton);
  gtk_box_pack_start (GTK_BOX (vbox2), silver_radiobutton, FALSE, FALSE, 0);
  gtk_radio_button_set_group (GTK_RADIO_BUTTON (silver_radiobutton), brass_radiobutton_group);
  brass_radiobutton_group = gtk_radio_button_get_group (GTK_RADIO_BUTTON (silver_radiobutton));
  gtk_toggle_button_set_mode (GTK_TOGGLE_BUTTON (silver_radiobutton), FALSE);

  dialog_action_area2 = GTK_DIALOG (MatlDlg)->action_area;
  gtk_widget_set_name (dialog_action_area2, "dialog_action_area2");
  gtk_widget_show (dialog_action_area2);
  gtk_button_box_set_layout (GTK_BUTTON_BOX (dialog_action_area2), GTK_BUTTONBOX_END);

  closebutton1 = gtk_button_new_from_stock ("gtk-close");
  gtk_widget_set_name (closebutton1, "closebutton1");
  gtk_widget_show (closebutton1);
  gtk_dialog_add_action_widget (GTK_DIALOG (MatlDlg), closebutton1, GTK_RESPONSE_CLOSE);
  GTK_WIDGET_SET_FLAGS (closebutton1, GTK_CAN_DEFAULT);

  g_signal_connect ((gpointer) brass_radiobutton, "toggled",
                    G_CALLBACK (on_brass_radiobutton_toggled),
                    NULL);
  g_signal_connect ((gpointer) bronze_radiobutton, "toggled",
                    G_CALLBACK (on_bronze_radiobutton_toggled),
                    NULL);
  g_signal_connect ((gpointer) copper_radiobutton, "toggled",
                    G_CALLBACK (on_copper_radiobutton_toggled),
                    NULL);
  g_signal_connect ((gpointer) gold_radiobutton, "toggled",
                    G_CALLBACK (on_gold_radiobutton_toggled),
                    NULL);
  g_signal_connect ((gpointer) pewter_radiobutton, "toggled",
                    G_CALLBACK (on_pewter_radiobutton_toggled),
                    NULL);
  g_signal_connect ((gpointer) plaster_radiobutton, "toggled",
                    G_CALLBACK (on_plaster_radiobutton_toggled),
                    NULL);
  g_signal_connect ((gpointer) plastic_radiobutton, "toggled",
                    G_CALLBACK (on_plastic_radiobutton_toggled),
                    NULL);
  g_signal_connect ((gpointer) silver_radiobutton, "toggled",
                    G_CALLBACK (on_silver_radiobutton_toggled),
                    NULL);

  /* Store pointers to all widgets, for use by lookup_widget(). */
  GLADE_HOOKUP_OBJECT_NO_REF (MatlDlg, MatlDlg, "MatlDlg");
  GLADE_HOOKUP_OBJECT_NO_REF (MatlDlg, dialog_vbox2, "dialog_vbox2");
  GLADE_HOOKUP_OBJECT (MatlDlg, vbox2, "vbox2");
  GLADE_HOOKUP_OBJECT (MatlDlg, brass_radiobutton, "brass_radiobutton");
  GLADE_HOOKUP_OBJECT (MatlDlg, bronze_radiobutton, "bronze_radiobutton");
  GLADE_HOOKUP_OBJECT (MatlDlg, copper_radiobutton, "copper_radiobutton");
  GLADE_HOOKUP_OBJECT (MatlDlg, gold_radiobutton, "gold_radiobutton");
  GLADE_HOOKUP_OBJECT (MatlDlg, pewter_radiobutton, "pewter_radiobutton");
  GLADE_HOOKUP_OBJECT (MatlDlg, plaster_radiobutton, "plaster_radiobutton");
  GLADE_HOOKUP_OBJECT (MatlDlg, plastic_radiobutton, "plastic_radiobutton");
  GLADE_HOOKUP_OBJECT (MatlDlg, silver_radiobutton, "silver_radiobutton");
  GLADE_HOOKUP_OBJECT_NO_REF (MatlDlg, dialog_action_area2, "dialog_action_area2");
  GLADE_HOOKUP_OBJECT (MatlDlg, closebutton1, "closebutton1");

  return MatlDlg;
}

GtkWidget*
create_TransDlg (void)
{
  GtkWidget *TransDlg;
  GtkWidget *dialog_vbox3;
  GtkWidget *combobox1;
  GtkWidget *dialog_action_area3;
  GtkWidget *button1;
  GtkWidget *button2;

  TransDlg = gtk_file_chooser_dialog_new (_("Data Exchange"), NULL, GTK_FILE_CHOOSER_ACTION_OPEN, NULL);
  gtk_widget_set_name (TransDlg, "TransDlg");
  gtk_window_set_destroy_with_parent (GTK_WINDOW (TransDlg), TRUE);
  gtk_window_set_type_hint (GTK_WINDOW (TransDlg), GDK_WINDOW_TYPE_HINT_DIALOG);

  dialog_vbox3 = GTK_DIALOG (TransDlg)->vbox;
  gtk_widget_set_name (dialog_vbox3, "dialog_vbox3");
  gtk_widget_show (dialog_vbox3);

  combobox1 = gtk_combo_box_new_text ();
  gtk_widget_set_name (combobox1, "combobox1");
  gtk_widget_show (combobox1);
  gtk_box_pack_end (GTK_BOX (dialog_vbox3), combobox1, FALSE, TRUE, 0);

  dialog_action_area3 = GTK_DIALOG (TransDlg)->action_area;
  gtk_widget_set_name (dialog_action_area3, "dialog_action_area3");
  gtk_widget_show (dialog_action_area3);
  gtk_button_box_set_layout (GTK_BUTTON_BOX (dialog_action_area3), GTK_BUTTONBOX_END);

  button1 = gtk_button_new_from_stock ("gtk-cancel");
  gtk_widget_set_name (button1, "button1");
  gtk_widget_show (button1);
  gtk_dialog_add_action_widget (GTK_DIALOG (TransDlg), button1, GTK_RESPONSE_CANCEL);
  GTK_WIDGET_SET_FLAGS (button1, GTK_CAN_DEFAULT);

  button2 = gtk_button_new_from_stock ("gtk-open");
  gtk_widget_set_name (button2, "button2");
  gtk_widget_show (button2);
  gtk_dialog_add_action_widget (GTK_DIALOG (TransDlg), button2, GTK_RESPONSE_OK);
  GTK_WIDGET_SET_FLAGS (button2, GTK_CAN_DEFAULT);

  /* Store pointers to all widgets, for use by lookup_widget(). */
  GLADE_HOOKUP_OBJECT_NO_REF (TransDlg, TransDlg, "TransDlg");
  GLADE_HOOKUP_OBJECT_NO_REF (TransDlg, dialog_vbox3, "dialog_vbox3");
  GLADE_HOOKUP_OBJECT (TransDlg, combobox1, "combobox1");
  GLADE_HOOKUP_OBJECT_NO_REF (TransDlg, dialog_action_area3, "dialog_action_area3");
  GLADE_HOOKUP_OBJECT (TransDlg, button1, "button1");
  GLADE_HOOKUP_OBJECT (TransDlg, button2, "button2");

  gtk_widget_grab_default (button2);
  return TransDlg;
}

